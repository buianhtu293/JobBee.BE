// <auto-generated />
using System;
using JobBee.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobBee.Persistence.Migrations
{
    [DbContext(typeof(JobBeeContext))]
    [Migration("20250520081952_Test")]
    partial class Test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobBee.Api.Models.AdminSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("AdminSettings_pkey");

                    b.HasIndex(new[] { "SettingName" }, "AdminSettings_SettingName_key")
                        .IsUnique();

                    b.ToTable("AdminSettings");
                });

            modelBuilder.Entity("JobBee.Api.Models.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("CurrentSalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Headline")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsAvailableForHire")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("SalaryExpectation")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Candidates_pkey");

                    b.HasIndex(new[] { "UserId" }, "Candidates_UserId_key")
                        .IsUnique();

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidateEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("EducationLevelId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FieldOfStudy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("CandidateEducation_pkey");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("CandidateEducation", (string)null);
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidateExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Achievements")
                        .HasColumnType("text");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("CandidateExperience_pkey");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateExperience", (string)null);
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidatePortfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProjectUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("CandidatePortfolio_pkey");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidatePortfolio", (string)null);
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidatePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JobType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("MinSalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("PreferredLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("RelocationWillingness")
                        .HasColumnType("boolean");

                    b.Property<string>("RemotePreference")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("TravelWillingness")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("CandidatePreferences_pkey");

                    b.HasIndex(new[] { "CandidateId" }, "CandidatePreferences_CandidateId_key")
                        .IsUnique();

                    b.ToTable("CandidatePreferences");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidateResume", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FileSize")
                        .HasColumnType("integer");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("CandidateResumes_pkey");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateResumes");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidateSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ProficiencyLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.Property<int?>("YearsExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CandidateSkills_pkey");

                    b.HasIndex("SkillId");

                    b.HasIndex(new[] { "CandidateId", "SkillId" }, "CandidateSkills_CandidateId_SkillId_key")
                        .IsUnique();

                    b.ToTable("CandidateSkills");
                });

            modelBuilder.Entity("JobBee.Api.Models.CompanyPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("CompanyPhotos_pkey");

                    b.HasIndex("EmployerId");

                    b.ToTable("CompanyPhotos");
                });

            modelBuilder.Entity("JobBee.Api.Models.CompanySize", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("SizeRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("CompanySizes_pkey");

                    b.HasIndex(new[] { "SizeRange" }, "CompanySizes_SizeRange_key")
                        .IsUnique();

                    b.ToTable("CompanySizes");
                });

            modelBuilder.Entity("JobBee.Api.Models.EducationLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("EducationLevels_pkey");

                    b.HasIndex(new[] { "LevelName" }, "EducationLevels_LevelName_key")
                        .IsUnique();

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("EmailLogs_pkey");

                    b.HasIndex("TemplateId");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmailSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("ApplicationUpdates")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("JobAlerts")
                        .HasColumnType("boolean");

                    b.Property<bool?>("JobRecommendations")
                        .HasColumnType("boolean");

                    b.Property<bool?>("MarketingEmails")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ProfileViews")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("EmailSettings_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("EmailSettings");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Variables")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("EmailTemplates_pkey");

                    b.HasIndex(new[] { "TemplateName" }, "EmailTemplates_TemplateName_key")
                        .IsUnique();

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("JobBee.Api.Models.Employer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("text");

                    b.Property<string>("CompanyLogo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CompanySizeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FoundedYear")
                        .HasColumnType("integer");

                    b.Property<string>("HeadquartersAddress")
                        .HasColumnType("text");

                    b.Property<string>("HeadquartersCity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HeadquartersCountry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HeadquartersState")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("IndustryId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VerificationDocuments")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("Employers_pkey");

                    b.HasIndex("CompanySizeId");

                    b.HasIndex("IndustryId");

                    b.HasIndex(new[] { "UserId" }, "Employers_UserId_key")
                        .IsUnique();

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmployerBenefit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BenefitDescription")
                        .HasColumnType("text");

                    b.Property<string>("BenefitName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("EmployerBenefits_pkey");

                    b.HasIndex("EmployerId");

                    b.ToTable("EmployerBenefits");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmployerReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Cons")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<string>("Pros")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'Pending'::character varying");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("EmployerReviews_pkey");

                    b.HasIndex("CandidateId");

                    b.HasIndex(new[] { "EmployerId", "CandidateId" }, "EmployerReviews_EmployerId_CandidateId_key")
                        .IsUnique();

                    b.ToTable("EmployerReviews");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmployerSocialMedium", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProfileUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("EmployerSocialMedia_pkey");

                    b.HasIndex(new[] { "EmployerId", "PlatformName" }, "EmployerSocialMedia_EmployerId_PlatformName_key")
                        .IsUnique();

                    b.ToTable("EmployerSocialMedia");
                });

            modelBuilder.Entity("JobBee.Api.Models.ExperienceLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("ExperienceLevels_pkey");

                    b.HasIndex(new[] { "LevelName" }, "ExperienceLevels_LevelName_key")
                        .IsUnique();

                    b.ToTable("ExperienceLevels");
                });

            modelBuilder.Entity("JobBee.Api.Models.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("Industries_pkey");

                    b.HasIndex(new[] { "IndustryName" }, "Industries_IndustryName_key")
                        .IsUnique();

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("JobBee.Api.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("AllowsWorkFromHome")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("ApplicationDeadline")
                        .HasColumnType("date");

                    b.Property<int?>("ApplicationsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExperienceLevelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRemote")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSalaryNegotiable")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("JobCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("JobTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("LocationCity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LocationCountry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LocationState")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("MaxSalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<Guid?>("MinEducationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MinSalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("PostedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<string>("SalaryPeriod")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("Jobs_pkey");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("MinEducationId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AlertName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("JobCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("JobTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Keywords")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("MinSalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("JobAlerts_pkey");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("JobAlerts");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AppliedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverLetter")
                        .HasColumnType("text");

                    b.Property<string>("EmployerNotes")
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'Pending'::character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("JobApplications_pkey");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ResumeId");

                    b.HasIndex(new[] { "JobId", "CandidateId" }, "JobApplications_JobId_CandidateId_key")
                        .IsUnique();

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("JobCategories_pkey");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex(new[] { "CategoryName" }, "JobCategories_CategoryName_key")
                        .IsUnique();

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobSearchLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("JobCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("JobTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("MaxSalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("MinSalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<int?>("ResultsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SearchDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SearchKeyword")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("JobSearchLogs_pkey");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobSearchLogs");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("JobSkills_pkey");

                    b.HasIndex("SkillId");

                    b.HasIndex(new[] { "JobId", "SkillId" }, "JobSkills_JobId_SkillId_key")
                        .IsUnique();

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("JobTypes_pkey");

                    b.HasIndex(new[] { "TypeName" }, "JobTypes_TypeName_key")
                        .IsUnique();

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("JobBee.Api.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationTypeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Notifications_pkey");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("JobBee.Api.Models.NotificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Template")
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("NotificationTypes_pkey");

                    b.HasIndex(new[] { "TypeName" }, "NotificationTypes_TypeName_key")
                        .IsUnique();

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("JobBee.Api.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Payments_pkey");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("JobBee.Api.Models.ReportedContent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("text");

                    b.Property<int>("ContentId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ReporterUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'Pending'::character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("ReportedContent_pkey");

                    b.HasIndex("ReporterUserId");

                    b.ToTable("ReportedContent", (string)null);
                });

            modelBuilder.Entity("JobBee.Api.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("Roles_pkey");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("JobBee.Api.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("RoleClaims_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("JobBee.Api.Models.SavedCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SavedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("SavedCandidates_pkey");

                    b.HasIndex("CandidateId");

                    b.HasIndex(new[] { "EmployerId", "CandidateId" }, "SavedCandidates_EmployerId_CandidateId_key")
                        .IsUnique();

                    b.ToTable("SavedCandidates");
                });

            modelBuilder.Entity("JobBee.Api.Models.SavedJob", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SavedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("SavedJobs_pkey");

                    b.HasIndex("JobId");

                    b.HasIndex(new[] { "CandidateId", "JobId" }, "SavedJobs_CandidateId_JobId_key")
                        .IsUnique();

                    b.ToTable("SavedJobs");
                });

            modelBuilder.Entity("JobBee.Api.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("Skills_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "SkillName" }, "Skills_SkillName_key")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("JobBee.Api.Models.SkillCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("SkillCategories_pkey");

                    b.HasIndex(new[] { "CategoryName" }, "SkillCategories_CategoryName_key")
                        .IsUnique();

                    b.ToTable("SkillCategories");
                });

            modelBuilder.Entity("JobBee.Api.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("AutoRenew")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Subscriptions_pkey");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("JobBee.Api.Models.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CandidateSearchLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FeaturedJobLimit")
                        .HasColumnType("integer");

                    b.Property<int?>("JobPostingLimit")
                        .HasColumnType("integer");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool?>("PriorityListing")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ProfileVisibility")
                        .HasColumnType("boolean");

                    b.Property<int?>("ResumeAccessLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("SubscriptionPlans_pkey");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("JobBee.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("Users_pkey");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JobBee.Api.Models.UserActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("UserActivityLogs_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivityLogs");
                });

            modelBuilder.Entity("JobBee.Api.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("UserClaims_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("JobBee.Api.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("UserLogins_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("JobBee.Api.Models.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("UserTokens_pkey");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("JobBee.Api.Models.WebsiteReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'Pending'::character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("WebsiteReviews_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("WebsiteReviews");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("UserRoles_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("JobBee.Api.Models.Candidate", b =>
                {
                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithOne("Candidate")
                        .HasForeignKey("JobBee.Api.Models.Candidate", "UserId")
                        .IsRequired()
                        .HasConstraintName("Candidates_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidateEducation", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("CandidateEducations")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("CandidateEducation_CandidateId_fkey");

                    b.HasOne("JobBee.Api.Models.EducationLevel", "EducationLevel")
                        .WithMany("CandidateEducations")
                        .HasForeignKey("EducationLevelId")
                        .HasConstraintName("CandidateEducation_EducationLevelId_fkey");

                    b.Navigation("Candidate");

                    b.Navigation("EducationLevel");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidateExperience", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("CandidateExperiences")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("CandidateExperience_CandidateId_fkey");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidatePortfolio", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("CandidatePortfolios")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("CandidatePortfolio_CandidateId_fkey");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidatePreference", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithOne("CandidatePreference")
                        .HasForeignKey("JobBee.Api.Models.CandidatePreference", "CandidateId")
                        .IsRequired()
                        .HasConstraintName("CandidatePreferences_CandidateId_fkey");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidateResume", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("CandidateResumes")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("CandidateResumes_CandidateId_fkey");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidateSkill", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("CandidateSkills_CandidateId_fkey");

                    b.HasOne("JobBee.Api.Models.Skill", "Skill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("CandidateSkills_SkillId_fkey");

                    b.Navigation("Candidate");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JobBee.Api.Models.CompanyPhoto", b =>
                {
                    b.HasOne("JobBee.Api.Models.Employer", "Employer")
                        .WithMany("CompanyPhotos")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("CompanyPhotos_EmployerId_fkey");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmailLog", b =>
                {
                    b.HasOne("JobBee.Api.Models.EmailTemplate", "Template")
                        .WithMany("EmailLogs")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("EmailLogs_TemplateId_fkey");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmailSetting", b =>
                {
                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("EmailSettings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("EmailSettings_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.Employer", b =>
                {
                    b.HasOne("JobBee.Api.Models.CompanySize", "CompanySize")
                        .WithMany("Employers")
                        .HasForeignKey("CompanySizeId")
                        .HasConstraintName("Employers_CompanySizeId_fkey");

                    b.HasOne("JobBee.Api.Models.Industry", "Industry")
                        .WithMany("Employers")
                        .HasForeignKey("IndustryId")
                        .HasConstraintName("Employers_IndustryId_fkey");

                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithOne("Employer")
                        .HasForeignKey("JobBee.Api.Models.Employer", "UserId")
                        .IsRequired()
                        .HasConstraintName("Employers_UserId_fkey");

                    b.Navigation("CompanySize");

                    b.Navigation("Industry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmployerBenefit", b =>
                {
                    b.HasOne("JobBee.Api.Models.Employer", "Employer")
                        .WithMany("EmployerBenefits")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("EmployerBenefits_EmployerId_fkey");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmployerReview", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("EmployerReviews")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("EmployerReviews_CandidateId_fkey");

                    b.HasOne("JobBee.Api.Models.Employer", "Employer")
                        .WithMany("EmployerReviews")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("EmployerReviews_EmployerId_fkey");

                    b.Navigation("Candidate");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmployerSocialMedium", b =>
                {
                    b.HasOne("JobBee.Api.Models.Employer", "Employer")
                        .WithMany("EmployerSocialMedia")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("EmployerSocialMedia_EmployerId_fkey");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobBee.Api.Models.Job", b =>
                {
                    b.HasOne("JobBee.Api.Models.Employer", "Employer")
                        .WithMany("Jobs")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("Jobs_EmployerId_fkey");

                    b.HasOne("JobBee.Api.Models.ExperienceLevel", "ExperienceLevel")
                        .WithMany("Jobs")
                        .HasForeignKey("ExperienceLevelId")
                        .HasConstraintName("Jobs_ExperienceLevelId_fkey");

                    b.HasOne("JobBee.Api.Models.JobCategory", "JobCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId")
                        .HasConstraintName("Jobs_JobCategoryId_fkey");

                    b.HasOne("JobBee.Api.Models.JobType", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("Jobs_JobTypeId_fkey");

                    b.HasOne("JobBee.Api.Models.EducationLevel", "MinEducation")
                        .WithMany("Jobs")
                        .HasForeignKey("MinEducationId")
                        .HasConstraintName("Jobs_MinEducationId_fkey");

                    b.Navigation("Employer");

                    b.Navigation("ExperienceLevel");

                    b.Navigation("JobCategory");

                    b.Navigation("JobType");

                    b.Navigation("MinEducation");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobAlert", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("JobAlerts")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("JobAlerts_CandidateId_fkey");

                    b.HasOne("JobBee.Api.Models.JobCategory", "JobCategory")
                        .WithMany("JobAlerts")
                        .HasForeignKey("JobCategoryId")
                        .HasConstraintName("JobAlerts_JobCategoryId_fkey");

                    b.HasOne("JobBee.Api.Models.JobType", "JobType")
                        .WithMany("JobAlerts")
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("JobAlerts_JobTypeId_fkey");

                    b.Navigation("Candidate");

                    b.Navigation("JobCategory");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobApplication", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("JobApplications")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("JobApplications_CandidateId_fkey");

                    b.HasOne("JobBee.Api.Models.Job", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("JobApplications_JobId_fkey");

                    b.HasOne("JobBee.Api.Models.CandidateResume", "Resume")
                        .WithMany("JobApplications")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("JobApplications_ResumeId_fkey");

                    b.Navigation("Candidate");

                    b.Navigation("Job");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobCategory", b =>
                {
                    b.HasOne("JobBee.Api.Models.JobCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("JobCategories_ParentCategoryId_fkey");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobSearchLog", b =>
                {
                    b.HasOne("JobBee.Api.Models.JobCategory", "JobCategory")
                        .WithMany("JobSearchLogs")
                        .HasForeignKey("JobCategoryId")
                        .HasConstraintName("JobSearchLogs_JobCategoryId_fkey");

                    b.HasOne("JobBee.Api.Models.JobType", "JobType")
                        .WithMany("JobSearchLogs")
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("JobSearchLogs_JobTypeId_fkey");

                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("JobSearchLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("JobSearchLogs_UserId_fkey");

                    b.Navigation("JobCategory");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobSkill", b =>
                {
                    b.HasOne("JobBee.Api.Models.Job", "Job")
                        .WithMany("JobSkills")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("JobSkills_JobId_fkey");

                    b.HasOne("JobBee.Api.Models.Skill", "Skill")
                        .WithMany("JobSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("JobSkills_SkillId_fkey");

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JobBee.Api.Models.Notification", b =>
                {
                    b.HasOne("JobBee.Api.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("Notifications_NotificationTypeId_fkey");

                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Notifications_UserId_fkey");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.Payment", b =>
                {
                    b.HasOne("JobBee.Api.Models.Subscription", "Subscription")
                        .WithMany("Payments")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("Payments_SubscriptionId_fkey");

                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Payments_UserId_fkey");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.ReportedContent", b =>
                {
                    b.HasOne("JobBee.Api.Models.User", "ReporterUser")
                        .WithMany("ReportedContents")
                        .HasForeignKey("ReporterUserId")
                        .IsRequired()
                        .HasConstraintName("ReportedContent_ReporterUserId_fkey");

                    b.Navigation("ReporterUser");
                });

            modelBuilder.Entity("JobBee.Api.Models.RoleClaim", b =>
                {
                    b.HasOne("JobBee.Api.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RoleClaims_RoleId_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JobBee.Api.Models.SavedCandidate", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("SavedCandidates")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("SavedCandidates_CandidateId_fkey");

                    b.HasOne("JobBee.Api.Models.Employer", "Employer")
                        .WithMany("SavedCandidates")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("SavedCandidates_EmployerId_fkey");

                    b.Navigation("Candidate");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobBee.Api.Models.SavedJob", b =>
                {
                    b.HasOne("JobBee.Api.Models.Candidate", "Candidate")
                        .WithMany("SavedJobs")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("SavedJobs_CandidateId_fkey");

                    b.HasOne("JobBee.Api.Models.Job", "Job")
                        .WithMany("SavedJobs")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("SavedJobs_JobId_fkey");

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("JobBee.Api.Models.Skill", b =>
                {
                    b.HasOne("JobBee.Api.Models.SkillCategory", "Category")
                        .WithMany("Skills")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Skills_CategoryId_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JobBee.Api.Models.Subscription", b =>
                {
                    b.HasOne("JobBee.Api.Models.SubscriptionPlan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("Subscriptions_PlanId_fkey");

                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Subscriptions_UserId_fkey");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.UserActivityLog", b =>
                {
                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("UserActivityLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserActivityLogs_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.UserClaim", b =>
                {
                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserClaims_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.UserLogin", b =>
                {
                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserLogins_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.UserToken", b =>
                {
                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserTokens_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBee.Api.Models.WebsiteReview", b =>
                {
                    b.HasOne("JobBee.Api.Models.User", "User")
                        .WithMany("WebsiteReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("WebsiteReviews_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("JobBee.Api.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserRoles_RoleId_fkey");

                    b.HasOne("JobBee.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserRoles_UserId_fkey");
                });

            modelBuilder.Entity("JobBee.Api.Models.Candidate", b =>
                {
                    b.Navigation("CandidateEducations");

                    b.Navigation("CandidateExperiences");

                    b.Navigation("CandidatePortfolios");

                    b.Navigation("CandidatePreference");

                    b.Navigation("CandidateResumes");

                    b.Navigation("CandidateSkills");

                    b.Navigation("EmployerReviews");

                    b.Navigation("JobAlerts");

                    b.Navigation("JobApplications");

                    b.Navigation("SavedCandidates");

                    b.Navigation("SavedJobs");
                });

            modelBuilder.Entity("JobBee.Api.Models.CandidateResume", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("JobBee.Api.Models.CompanySize", b =>
                {
                    b.Navigation("Employers");
                });

            modelBuilder.Entity("JobBee.Api.Models.EducationLevel", b =>
                {
                    b.Navigation("CandidateEducations");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobBee.Api.Models.EmailTemplate", b =>
                {
                    b.Navigation("EmailLogs");
                });

            modelBuilder.Entity("JobBee.Api.Models.Employer", b =>
                {
                    b.Navigation("CompanyPhotos");

                    b.Navigation("EmployerBenefits");

                    b.Navigation("EmployerReviews");

                    b.Navigation("EmployerSocialMedia");

                    b.Navigation("Jobs");

                    b.Navigation("SavedCandidates");
                });

            modelBuilder.Entity("JobBee.Api.Models.ExperienceLevel", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobBee.Api.Models.Industry", b =>
                {
                    b.Navigation("Employers");
                });

            modelBuilder.Entity("JobBee.Api.Models.Job", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("JobSkills");

                    b.Navigation("SavedJobs");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobCategory", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("JobAlerts");

                    b.Navigation("JobSearchLogs");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobBee.Api.Models.JobType", b =>
                {
                    b.Navigation("JobAlerts");

                    b.Navigation("JobSearchLogs");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobBee.Api.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("JobBee.Api.Models.Role", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("JobBee.Api.Models.Skill", b =>
                {
                    b.Navigation("CandidateSkills");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("JobBee.Api.Models.SkillCategory", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("JobBee.Api.Models.Subscription", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("JobBee.Api.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("JobBee.Api.Models.User", b =>
                {
                    b.Navigation("Candidate");

                    b.Navigation("EmailSettings");

                    b.Navigation("Employer");

                    b.Navigation("JobSearchLogs");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("ReportedContents");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserActivityLogs");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserTokens");

                    b.Navigation("WebsiteReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
