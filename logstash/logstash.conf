# Input: Read data from postgresql
input {
  jdbc {
    jdbc_connection_string => "jdbc:postgresql://jobbee.database:5432/JobBee"
    jdbc_user => "postgres"
    jdbc_password => "123"
    jdbc_driver_library => "/usr/share/logstash/postgresql-42.7.4.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    schedule => "*/10 * * * * *" # Run every 10 seconds
    jdbc_paging_enabled => true
    jdbc_page_size => 1000
    statement => "
  SELECT
    j.id,
    e.company_name AS employer_name,
    jc.category_name AS job_category,
    jt.type_name AS job_type,
    el.level_name AS experience_level,
    ed.level_name AS min_education_level,
    j.title,
    j.min_salary,
    j.max_salary,
    j.salary_period,
    j.is_salary_negotiable AS salary_negotiable,
    j.location_city,
    j.location_state,
    j.location_country,
    j.is_remote,
    j.application_deadline,  
    j.is_featured,
    j.views_count,
    j.applications_count,
    j.posted_at,             
    j.updated_at,            
    j.expires_at,            
    CASE 
        WHEN TO_TIMESTAMP(j.expires_at / 1000.0) < NOW() THEN 'expired'
        ELSE 'active'
    END AS job_status
  FROM jobs j
  LEFT JOIN employers e ON j.employer_id = e.id
  LEFT JOIN job_categories jc ON j.job_category_id = jc.id
  LEFT JOIN job_types jt ON j.job_type_id = jt.id
  LEFT JOIN experience_levels el ON j.experience_level_id = el.id
  LEFT JOIN education_levels ed ON j.min_education_id = ed.id
  WHERE 
    j.updated_at >= NOW() - INTERVAL '1 DAY'
    OR TO_TIMESTAMP(j.expires_at / 1000.0) < NOW()
  ORDER BY 
    CASE WHEN TO_TIMESTAMP(j.expires_at / 1000.0) < NOW() THEN 1 ELSE 0 END,
    j.updated_at DESC
"
    last_run_metadata_path => "/usr/share/logstash/data/.logstash_jdbc_last_run"
  }
}

# Filter: Remove unuseful field
filter {
  mutate {
    remove_field => ["@version", "@timestamp"]
  }
}

# Output: Push data to Elasticsearch
output {
  elasticsearch {
    hosts => ["http://els:9200"]
    user => "elastic"
    password => "l3lack0ver9669"
    index => "jobs"
    document_id => "%{id}"
    doc_as_upsert => true
  }
  stdout { codec => rubydebug }
}
